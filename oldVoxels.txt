extern Image noise;
extern Image voxelList;
extern number numVoxels;
extern number chunkWidth;
extern number chunkHeight;
extern vec3 lookFrom = vec3(1.5,1.5,-3);
extern vec3 lookAt = vec3(1.5,1.5,-2);
extern float depth;
float seed;

float rand(vec2 uv) {
    vec4 inputs = Texel(noise,uv);
    seed = fract(sin(dot(vec2(seed,inputs.r), vec2(12.9898, 78.233))) * 43758.5453);
    return seed;
}

struct ray {
    vec3 orig;
    vec3 dir;
};

vec3 unitVector (vec3 v) {
    return v / sqrt(v.x*v.x + v.y*v.y + v.z * v.z);
}

mat4 translate(vec3 t) {
    return mat4(
        vec4(1,0,0,t.x),
        vec4(0,1,0,t.y),
        vec4(0,0,1,t.z),
        vec4(0,0,0,1)
    );
}

mat4 rotX(float theta) {
    return mat4(
        vec4(1,0         ,0          ,0),
        vec4(0,cos(theta),-sin(theta),0),
        vec4(0,sin(theta),cos(theta) ,0),
        vec4(0,0         ,0          ,1)
    );
}

mat4 rotY(float theta) {
    return mat4(
        vec4(cos(theta) ,0         ,sin(theta),0),
        vec4(0          ,1         ,0         ,0),
        vec4(-sin(theta),0         ,cos(theta),0),
        vec4(0          ,0         ,0         ,1)
    );
}

mat4 rotZ(float theta) {
    return mat4(
        vec4(cos(theta),-sin(theta),0          ,0),
        vec4(sin(theta),cos(theta) ,0          ,0),
        vec4(0         ,0          ,1          ,0),
        vec4(0         ,0          ,0          ,1)
    );
}

vec2 boxHit(ray r, vec3 edge, float size) {
    float tmin = (edge.x - r.orig.x) / r.dir.x; 
    float tmax = (edge.x + size - r.orig.x) / r.dir.x; 

    float temp;

    if (tmin > tmax){
        temp = tmin;
        tmin = tmax;
        tmax = temp;
    }

    float tymin = (edge.y - r.orig.y) / r.dir.y; 
    float tymax = (edge.y + size - r.orig.y) / r.dir.y; 

    if (tymin > tymax)  {
        temp = tymin;
        tymin = tymax;
        tymax = temp;
    } 

    if ((tmin > tymax) || (tymin > tmax)) 
        return vec2(0,0); 

    if (tymin > tmin) tmin = tymin; 
    if (tymax < tmax) tmax = tymax; 

    float tzmin = (edge.z - r.orig.z) / r.dir.z; 
    float tzmax = (edge.z + size - r.orig.z) / r.dir.z; 

    if (tzmin > tzmax) {
        temp = tzmin;
        tzmin = tzmax;
        tzmax = temp;
    }

    if ((tmin > tzmax) || (tzmin > tmax)) 
        return vec2(0,0); 

    if (tzmin > tmin) tmin = tzmin; 
    if (tzmax < tmax) tmax = tzmax; 

    return vec2(tmin,tmax); 
}

vec4 effect(vec4 color, Image texture, vec2 uv, vec2 xy) {
    float width = xy.x / uv.x;
    float height = xy.y / uv.y;
    float vPHeight = 2;
    float vPWidth = vPHeight * (width/height);
    number samplesPerPixel = 1;
    vec3 cameraCenter = lookFrom;
    float focalLength = 1;
    vec3 vup = unitVector(vec3(0,1,0));
    vec3 w = unitVector(lookFrom-lookAt);
    vec3 u = unitVector(cross(vup,w));
    vec3 v = cross(w,u);
    vec3 vPU = vPWidth * u;
    vec3 vPV = vPHeight * -v;
    vec3 pDU = vPU / width;
    vec3 pDV = vPV / height;
    vec3 vUL = cameraCenter - (focalLength * w) - vPU/2 - vPV/2;
    vec3 pixelOrigin = vUL + .5 * pDV + .5 * pDU;

    ray r;
    r.orig = cameraCenter;
    r.dir = pixelOrigin + xy.x * pDU + xy.y * pDV - r.orig;
    vec3 point = r.orig;
    r.dir = unitVector(r.dir);

    vec3 hitSpot = vec3(2,1,0);

    vec3 light = vec3 (4,2.5,-1.5);

    light += .5;

    //return Texel(voxelList,vec2(.5/width,.5/height));

    float size = 1;

    vec2 t = boxHit(r,hitSpot,1);

    if (t.x > 0 || t.y > 0) {
        if (floor(point.x) != hitSpot.x || floor(point.y) != hitSpot.y || floor(point.z) != hitSpot.z) {
                    if (t.x > 0) {
                        point = r.orig + t.x * r.dir;
                    }
                    else {
                        point = r.orig + t.y * r.dir;
                    }
                    point += .000001 * r.dir;
        }
        for (int i = 0; i < 50000; i ++) {
            if (floor(point.x) == hitSpot.x && floor(point.y) == hitSpot.y && floor(point.z) == hitSpot.z) {
                vec3 oldPoint = point;
                vec2 pixelSelect = vec2(0,0);
                vec3 lowerBound = vec3(0,0,0);
                point -= hitSpot;
                vec4 data = vec4(0,0,0,0);
                for (int j = 1; j <= depth; j++) {

                    pixelSelect.x = data.r * 4 * 255;
                    pixelSelect.y = data.g * 2 * 255;

                    float halfway = (1/pow(2,j));
                    
                    if (point.z > lowerBound.z + halfway) {
                        pixelSelect.y += 1;
                        lowerBound.z += halfway;
                    }
                    if (point.x > lowerBound.x + halfway) {
                        pixelSelect.x += 1;
                        lowerBound.x += halfway;
                    }
                    if (point.y > lowerBound.y + halfway) {
                        pixelSelect.x += 2;
                        lowerBound.y += halfway;
                    }
                
                    pixelSelect += .5;

                    pixelSelect.y /= height;
                    pixelSelect.x /= width;

                    data = Texel(voxelList,pixelSelect);

                    if (data.a < 1 && data.a > 0) {

                        r.orig = cameraCenter;
                        r.dir = oldPoint - cameraCenter;
                        t = boxHit(r,lowerBound+hitSpot,halfway);
                        
                        oldPoint = cameraCenter + t.x * r.dir;
                        //return vec4(oldPoint-hitSpot,1);
                        vec3 normal = vec3(0,0,0);

                        float lineWidth = .000001;

                        if (abs(oldPoint.x-lowerBound.x-hitSpot.x) <= lineWidth) {
                            normal.x = -1;
                        }
                        else if (abs(oldPoint.x-lowerBound.x-hitSpot.x - halfway) <= lineWidth) {
                            normal.x = 1;
                        }
                        if (abs(oldPoint.y-lowerBound.y-hitSpot.y-halfway) <= lineWidth) {
                            normal.y = 1;
                        }
                        else if (abs(oldPoint.y-lowerBound.y-hitSpot.y) <= lineWidth) {
                            normal.y = -1;
                        }
                        if (abs(oldPoint.z-lowerBound.z-hitSpot.z) <= lineWidth) {
                            normal.z = -1;
                        }
                        else if (abs(oldPoint.z-lowerBound.z-hitSpot.z - halfway) <= lineWidth) {
                            normal.z = 1;
                        }
                        if (dot(abs(normal),vec3(1,1,1)) > dot(vec3(1,0,0),vec3(1,1,1))) {
                            return vec4(0,0,0,1);
                        }

                        //return vec4(normal,1);

                        light = unitVector(light-point-hitSpot);
                        
                        return vec4(1,1,1,1) * 1.5 * dot(normal,light);
                    }
                    if (data.a == 0) {
                        point = oldPoint;
                        point += .05 * halfway * r.dir;
                        break;
                        return vec4(0,1,0,1);
                    }
                    
                }
            }
            else {
                break;
            }
        }
    }
    
    vec4 pixel = Texel(voxelList,uv);
    pixel = vec4(.5,.7,1,1);
    return pixel;
}